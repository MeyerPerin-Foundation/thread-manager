import logging
from datetime import datetime
from social_media import SocialMediaPoster, SocialMediaDocument

logger = logging.getLogger("tm-countdown")
logger.setLevel(logging.INFO)

class CountdownContent:
    def _calculate_date_difference(self, target_date: str, after_utc: str = None) -> int | None:
        try:
            # Convert the fixed date string to a datetime object
            target_date_obj = datetime.strptime(target_date, "%Y-%m-%d").date()

            # Get today's date
            if not after_utc:
                today = datetime.today().date()
            else:
                after_utc = after_utc.replace("UTC", "Z")
                today = datetime.fromisoformat(after_utc).date()

            # Calculate the difference in days
            difference = (target_date_obj - today).days

            return difference
        except ValueError:
            print("Error in calculating the date difference")
            return None

    def _generate_days_until_document(
        self,
        event_name: str,
        event_date: str,
        plural : bool = False,
        stop: int = 0,
        after_utc = None,
    ) -> str | None:
        logger.info(f"Calculating the days until {event_name} on {event_date}")

        # if stop is a string, convert it to an int
        if isinstance(stop, str):
            try:
                stop = int(stop)
            except ValueError:
                logger.error(f"Invalid stop value: {stop}. Must be an integer.")
                return None

        # Calculate the difference in days
        difference = self._calculate_date_difference(event_date, after_utc)
        logger.info(f"Calculated the difference as {difference}")

        if difference is None:
            logger.error(f"Invalid date format {event_date}. Please use 'YYYY-MM-DD'.")
            return None
        else:
            logger.info(f"Days until {event_name}: {difference}")

        if difference < stop:
            logger.warning(
                f"Event {event_name} happened {difference} days ago, which is more than the limit of {abs(stop)} days ago. No content will be generated."
            )
            return None

        # # If the difference is more than 90 days, it should be a multiple of 10 or 365
        # if difference > 90:
        #     if not ((difference % 10 == 0) or (difference % 365 == 0)):
        #         logger.warning(
        #             f"Event {event_name} is {difference} days away, which is not a multiple of 10 or 365. No content will be generated."
        #         )
        #         return None

        text = ""

        if plural:
            verb_before = "are"
            verb_after = "were"
        else:
            verb_before = "is"
            verb_after = "was"

        if difference > 1:
            text = f"There are {difference} days until {event_name}"
        elif difference == 1:
            # capitalize the first letter of the event name
            event_name = event_name.capitalize()
            text = f"{event_name} {verb_before} tomorrow!"
        elif difference == 0:
            event_name = event_name.capitalize()
            text = f"{event_name} {verb_before} today!"
        elif difference == -1:
            event_name = event_name.capitalize()
            text = f"{event_name} {verb_after} {abs(difference)} yesterday!"
        else:
            event_name = event_name.capitalize()
            text = f"{event_name} {verb_after} {abs(difference)} days ago!"

        logger.info(f"Text generated by days_until: {text}")
        p = SocialMediaPoster()

        id = p.generate_and_queue_document(text, hashtags=["DaysUntil"], after_utc=after_utc)
        return id

    def queue_midterms_countdown(self, after_utc = None) -> str | None:
        return self._generate_days_until_document(
            "the US midterms", "2026-11-03", plural=True, stop=0, after_utc=after_utc)

    def post_midterms_countdown(self) -> SocialMediaDocument | None:
        p = SocialMediaPoster()
        id = self.queue_midterms_countdown()
        return p.post_with_id(id)
